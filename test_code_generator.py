#!/usr/bin/env python3
"""
Simple test of CrewBuilder Code Generator
Tests the core logic without requiring CrewAI installation
"""

import sys
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Import our data models (without CrewAI dependencies)
try:
    from agents.system_architect import AgentSpecification, TaskSpecification, CrewWorkflow, CrewArchitecture
    print("SUCCESS: Data models imported without CrewAI")
except ImportError as e:
    print(f"ERROR: Could not import data models: {e}")
    sys.exit(1)

def generate_agents_code_template(agents):
    """Generate CrewAI Agent code from specifications (template only)"""
    code_parts = []
    
    for agent in agents:
        tools_str = ', '.join([f'"# {tool}"' for tool in agent.tools]) if agent.tools else ""
        tools_list = f"[{tools_str}]" if agent.tools else "[]"
        
        code_parts.append(f'''{agent.name.lower().replace(" ", "_")} = Agent(
    role="{agent.role}",
    goal="{agent.goal}",
    backstory="""{agent.backstory}""",
    tools={tools_list},
    max_iter={agent.max_iter},
    memory={agent.memory},
    verbose={agent.verbose},
    allow_delegation={agent.allow_delegation}
)''')
    
    return '\n\n'.join(code_parts)

def generate_tasks_code_template(tasks):
    """Generate CrewAI Task code from specifications (template only)"""
    code_parts = []
    
    for task in tasks:
        agent_var = task.agent_name.lower().replace(" ", "_")
        
        code_parts.append(f'''{task.name.lower().replace(" ", "_")} = Task(
    description="""{task.description}""",
    expected_output="{task.expected_output}",
    agent={agent_var}
)''')
    
    return '\n\n'.join(code_parts)

def generate_crew_code_template(crew_architecture):
    """Generate CrewAI Crew orchestration code (template only)"""
    
    agent_vars = [agent.name.lower().replace(" ", "_") for agent in crew_architecture.agents]
    task_vars = [task.name.lower().replace(" ", "_") for task in crew_architecture.tasks]
    
    return f'''crew = Crew(
    agents=[{', '.join(agent_vars)}],
    tasks=[{', '.join(task_vars)}],
    verbose=True,
    memory=True
)'''

class MockGeneratedCode:
    """Mock version of GeneratedCode for testing"""
    def __init__(self, main_code, requirements_txt, setup_instructions, usage_example):
        self.main_code = main_code
        self.requirements_txt = requirements_txt
        self.setup_instructions = setup_instructions
        self.usage_example = usage_example

def create_fallback_code_template(crew_architecture):
    """Create basic code when AI generation fails (template only)"""
    
    # Generate basic CrewAI code using templates
    agents_code = generate_agents_code_template(crew_architecture.agents)
    tasks_code = generate_tasks_code_template(crew_architecture.tasks)
    crew_code = generate_crew_code_template(crew_architecture)
    
    main_code = f'''"""
{crew_architecture.crew_name}
{crew_architecture.crew_description}

Auto-generated by CrewBuilder
"""

from crewai import Agent, Task, Crew
import os
from typing import List

# Agent Definitions
{agents_code}

# Task Definitions  
{tasks_code}

# Crew Definition
{crew_code}

if __name__ == "__main__":
    print("Starting {crew_architecture.crew_name}")
    result = crew.kickoff()
    print("Crew execution completed!")
    print(f"Result: {{result}}")
'''

    requirements = """crewai>=0.1.0
python-dotenv>=1.0.0
openai>=1.0.0"""

    setup = f"""# Setup Instructions for {crew_architecture.crew_name}

1. Install dependencies:
   pip install -r requirements.txt

2. Configure environment:
   - Copy config template to .env file
   - Add your API keys

3. Run the crew:
   python main.py

Dependencies needed: {', '.join(crew_architecture.dependencies)}"""

    return MockGeneratedCode(
        main_code=main_code,
        requirements_txt=requirements,
        setup_instructions=setup,
        usage_example="python main.py"
    )

def create_test_architecture():
    """Create a simple crew architecture for testing"""
    
    # Test agents
    agents = [
        AgentSpecification(
            name="Content Researcher",
            role="Research Specialist", 
            goal="Find trending topics and gather relevant information",
            backstory="Expert at finding current trends and gathering comprehensive research data",
            tools=["web_search", "content_analysis"],
            max_iter=3,
            memory=True,
            verbose=True,
            allow_delegation=False
        ),
        AgentSpecification(
            name="Content Writer", 
            role="Content Creation Specialist",
            goal="Write engaging blog posts and social media content",
            backstory="Skilled writer who creates compelling content that resonates with target audiences",
            tools=["text_generation", "grammar_check"],
            max_iter=5,
            memory=True,
            verbose=True,
            allow_delegation=False
        )
    ]
    
    # Test tasks
    tasks = [
        TaskSpecification(
            name="research_trends",
            description="Research current trends in the specified industry and gather supporting data",
            agent_name="Content Researcher",
            expected_output="Detailed research report with trending topics and supporting data",
            depends_on=[],
            output_format="json"
        ),
        TaskSpecification(
            name="create_content",
            description="Create blog post and social media content based on research findings", 
            agent_name="Content Writer",
            expected_output="Complete blog post and 5 social media posts",
            depends_on=["research_trends"],
            output_format="text"
        )
    ]
    
    # Test workflow
    workflow = CrewWorkflow(
        name="Content Creation Pipeline",
        description="Research trends and create engaging content",
        task_sequence=["research_trends", "create_content"],
        parallel_tasks=[],
        decision_points=[]
    )
    
    # Complete architecture
    return CrewArchitecture(
        crew_name="Content Creation Crew",
        crew_description="Automated content creation system for digital marketing",
        agents=agents,
        tasks=tasks,
        workflow=workflow,
        estimated_runtime="15-30 minutes",
        resource_requirements={"api_calls": "moderate", "processing": "light"},
        success_metrics=["content_quality", "trend_relevance", "engagement_potential"],
        dependencies=["openai", "web_search_api", "content_tools"]
    )

def test_code_generation_logic():
    """Test our code generation logic without CrewAI"""
    print("Testing Code Generator Logic (No CrewAI Required)")
    print("=" * 60)
    
    # Create test architecture
    test_architecture = create_test_architecture()
    print(f" Test architecture created: {test_architecture.crew_name}")
    print(f"   • Agents: {len(test_architecture.agents)}")
    print(f"   • Tasks: {len(test_architecture.tasks)}")
    
    # Test our code generation templates (without AI)
    try:
        # Test our template generation logic directly (avoid CrewAI imports)
        agents_code = generate_agents_code_template(test_architecture.agents)
        tasks_code = generate_tasks_code_template(test_architecture.tasks) 
        crew_code = generate_crew_code_template(test_architecture)
        fallback_code = create_fallback_code_template(test_architecture)
        
        print("\n Template Generation Tests:")
        print(f"   • Agent code generated: {len(agents_code)} characters")
        print(f"   • Task code generated: {len(tasks_code)} characters")
        print(f"   • Crew code generated: {len(crew_code)} characters")
        print(f"   • Fallback package: {len(fallback_code.main_code)} characters")
        
        # Show sample of generated code
        print(f"\n Sample Generated Agent Code:")
        print("=" * 40)
        print(agents_code[:300] + "..." if len(agents_code) > 300 else agents_code)
        
        print(f"\n Sample Generated Task Code:")
        print("=" * 40) 
        print(tasks_code[:300] + "..." if len(tasks_code) > 300 else tasks_code)
        
        print(f"\n Generated Code Package Components:")
        print(f"   • Main code:  Generated")
        print(f"   • Requirements:  {fallback_code.requirements_txt}")
        print(f"   • Setup guide:  {len(fallback_code.setup_instructions)} characters")
        print(f"   • Usage example:  {fallback_code.usage_example}")
        
        return True
        
    except Exception as e:
        print(f" Template generation failed: {e}")
        return False

def validate_generated_code_structure(generated_code):
    """Validate the structure of generated code"""
    print(f"\n Code Structure Validation:")
    
    # Check for key CrewAI patterns
    checks = [
        ("Agent imports", "from crewai import Agent" in generated_code),
        ("Task imports", "from crewai import Task" in generated_code), 
        ("Crew imports", "from crewai import Crew" in generated_code),
        ("Agent creation", "= Agent(" in generated_code),
        ("Task creation", "= Task(" in generated_code),
        ("Crew creation", "= Crew(" in generated_code),
        ("Main execution", 'if __name__ == "__main__"' in generated_code),
        ("Proper formatting", len(generated_code.split('\n')) > 10)
    ]
    
    passed = 0
    for check_name, check_result in checks:
        status = "" if check_result else ""
        print(f"   {status} {check_name}")
        if check_result:
            passed += 1
    
    print(f"\n Validation Score: {passed}/{len(checks)} checks passed")
    return passed == len(checks)

if __name__ == "__main__":
    print("CrewBuilder Code Generator - Offline Test")
    print("Testing code generation logic without CrewAI dependencies...")
    print()
    
    try:
        # Test 1: Basic logic
        success = test_code_generation_logic()
        
        if success:
            # Test 2: Validate structure  
            test_arch = create_test_architecture()
            fallback_result = create_fallback_code_template(test_arch)
            
            validate_generated_code_structure(fallback_result.main_code)
            
            print(f"\n SUCCESS: Code Generator logic validated!")
            print(f"    Template generation working")
            print(f"    Code structure correct")
            print(f"    Ready for CrewAI integration testing")
            
        else:
            print(f"\n FAILURE: Code generation logic needs fixes")
            
    except ImportError as e:
        print(f" Import error: {e}")
        print("This indicates an issue with our code structure")
    except Exception as e:
        print(f" Unexpected error: {e}")
        print("This needs investigation")
